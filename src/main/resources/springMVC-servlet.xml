<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/mvc  
    http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
        http://www.springframework.org/schema/tx   
    http://www.springframework.org/schema/tx/spring-tx-3.2.xsd 
          http://www.springframework.org/schema/aop   
      http://www.springframework.org/schema/aop/spring-aop-3.0.xsd   
      http://www.springframework.org/schema/cache 
      http://www.springframework.org/schema/cache/spring-cache-3.0.xsd">
	<mvc:annotation-driven />
	<!-- classpath:spring-context.xsd -->
	<!-- 启用spring mvc 注解 -->
	<context:annotation-config />


<mvc:resources location="/map/" mapping="/map/**"></mvc:resources>  
    <mvc:resources location="/front/" mapping="/front/**"></mvc:resources>  
    <mvc:resources location="/comm/" mapping="/comm/**"></mvc:resources>  
    <mvc:resources location="/assets/" mapping="/assets/**"></mvc:resources> 
            <!-- Enables swgger ui-->
        <mvc:resources mapping="*.html" location="/"/>
        <mvc:resources mapping="/**" location="/"/> 
	<!-- 设置使用注解的类所在的jar包 -->
	<context:component-scan base-package="com"
		annotation-config="true"></context:component-scan>
	<context:component-scan base-package="com.jl.action" />
	<context:component-scan base-package="com.jl.swagger" />

	<!-- 完成请求和注解POJO的映射 -->


	<!-- 对转向页面的路径解析。prefix：前缀， suffix：后缀 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver"
		p:prefix="/" p:suffix="" />
	<!-- <bean name="login" class="com.crm.action.LoginAction2" scope="prototype"></bean> -->

	<!-- 完成请求和注解POJO的映射 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" />
			</list>
		</property>
	</bean>
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
				<value>application/json;charset=UTF-8</value>
			</list>

		</property>
	</bean>
	<bean
		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="messageConverters">
			<list>
				<bean
					class="org.springframework.http.converter.StringHttpMessageConverter">
					<property name="supportedMediaTypes">
						<list>
							<bean class="org.springframework.http.MediaType">
								<constructor-arg index="0" value="text" />
								<constructor-arg index="1" value="plain" />
								<constructor-arg index="2" value="UTF-8" />
							</bean>
							<bean class="org.springframework.http.MediaType">
								<constructor-arg index="0" value="*" />
								<constructor-arg index="1" value="*" />
								<constructor-arg index="2" value="UTF-8" />
							</bean>
						</list>
					</property>
				</bean>
			</list>
		</property>
	</bean>
	<!-- quartz定时任务 -->
	<aop:config proxy-target-class="true" />
	<!-- 使用MethodInvokingJobDetailFactoryBean，任务类可以不实现Job接口，通过targetMethod指定调用方法 -->
	<bean id="taskJob" class="com.jl.jobs.MyJob" />
	<bean id="jobBean" class="com.jl.jobs.MakeHtml" />
	<bean id="offsideAlarm" class="com.jl.jobs.OffsideAlarm" />
	<bean id="jobDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="group" value="job_work" />
		<property name="name" value="job_work_name" />
		<!--false表示等上一个任务执行完后再开启新的任务 -->
		<property name="concurrent" value="true" />
		<property name="targetObject">
			<ref bean="taskJob" />
		</property>
		<property name="targetMethod">
			<value>run</value>
		</property>
	</bean>
	<bean id="jobDetail_1"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="jobBean" />
		<property name="targetMethod" value="execute" /><!-- 执行"jobBean"中的execute方法 -->
		<!--将并发设置为false -->
		<property name="concurrent" value="true" />
	</bean>
	<bean id="alarmJob"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="offsideAlarm" />
		<property name="targetMethod" value="checkOffside" />
		<!--将并发设置为false -->
		<property name="concurrent" value="true" />
	</bean>
	
	<!-- 调度触发器 -->
	<bean id="myTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="name" value="work_default_name" />
		<property name="group" value="work_default" />
		<property name="jobDetail">
			<ref bean="jobDetail" />
		</property>
		<property name="cronExpression">
			<value>0/60 * * * * ?</value>
		</property>
	</bean>
	<bean id="OffsideAlarmTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean"><!-- 定义 Job 何时执行 -->
		<property name="jobDetail" ref="alarmJob" />
		<!--表达式，我的是每 *s 执行一次 -->
		<property name="cronExpression" value="0 0/10 6,22 * * ?" /><!-- 
			“ 0 0 12 * * ? ”会在每天中午 12 点触发 执行；“ 0 15 10 ? * 6L ”会在每个月的最后一个星期五的早上 10:15 
			触发 Job 执行 -->
	</bean>
	<bean id="trigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean"><!-- 定义 Job 何时执行 -->
		<property name="jobDetail" ref="jobDetail_1" />
		<!--表达式，我的是每 *s 执行一次 -->
		<property name="cronExpression" value="0/60 * * * * ?" /><!-- 
			“ 0 0 12 * * ? ”会在每天中午 12 点触发 执行；“ 0 15 10 ? * 6L ”会在每个月的最后一个星期五的早上 10:15 
			触发 Job 执行 -->
	</bean>
	<!-- 调度工厂 -->
	<!-- 如果将lazy-init='false'那么容器启动就会执行调度程序 -->
	<bean id="scheduler"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean"
		lazy-init="false">
		<property name="triggers">
			<list>
				<!--作业调度器,list下可加入其他的调度器 -->
				<ref bean="myTrigger" />
				<ref bean="trigger" />
				<ref bean="OffsideAlarmTrigger" />
			</list>
		</property>

	</bean>

	<bean class="com.jl.servlet.StartUp"></bean>
</beans>